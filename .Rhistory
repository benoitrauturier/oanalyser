usethis::use_readme_rmd()
# the goal of this file is to keep track of all devtools/usethis
# call you make for yout project
# Feel free to cherry pick what you need and add elements
# install.packages("desc")
# install.packages("devtools")
# install.packages("usethis")
# Hide this file from build
usethis::use_build_ignore("devstuff_history.R")
# DESCRIPTION
library(desc)
# Create and clean desc
my_desc <- description$new("DESCRIPTION")
# Set your package name
my_desc$set("Package", "oanalyser")
#Set your name
my_desc$set("Authors@R", "person('Benoit', 'Rauturier', email = 'benoit.rauturier@gmail.com', role = c('cre', 'aut'))")
# Set the version
my_desc$set_version("0.0.0.9000")
# The title of your package
my_desc$set(Title = "O'Analyser - ")
# The description of your package
my_desc$set(Description = "O'analyser is a full featured application to analyse orienteering races.")
# The urls
#my_desc$set("URL", "https://github.com/ThinkR-open/oanalyser")
#my_desc$set("BugReports", "https://github.com/ThinkR-open/oanalyser/issues")
# Save everyting
my_desc$write(file = "DESCRIPTION")
# If you want to use the MIT licence, code of conduct, lifecycle badge, and README
usethis::use_mit_license(name = "Benoit Rauturier")
usethis::use_readme_rmd()
?usethis::use_readme_rmd()
# the goal of this file is to keep track of all devtools/usethis
# call you make for yout project
# Feel free to cherry pick what you need and add elements
# install.packages("desc")
# install.packages("devtools")
# install.packages("usethis")
# Hide this file from build
usethis::use_build_ignore("devstuff_history.R")
# DESCRIPTION
library(desc)
# Create and clean desc
my_desc <- description$new("DESCRIPTION")
# Set your package name
my_desc$set("Package", "oanalyser")
#Set your name
my_desc$set("Authors@R", "person('Benoit', 'Rauturier', email = 'benoit.rauturier@gmail.com', role = c('cre', 'aut'))")
# Set the version
my_desc$set_version("0.0.0.9000")
# The title of your package
my_desc$set(Title = "O'Analyser - ")
# The description of your package
my_desc$set(Description = "O'analyser is a full featured application to analyse orienteering races.")
# The urls
#my_desc$set("URL", "https://github.com/ThinkR-open/oanalyser")
#my_desc$set("BugReports", "https://github.com/ThinkR-open/oanalyser/issues")
# Save everyting
my_desc$write(file = "DESCRIPTION")
# If you want to use the MIT licence, code of conduct, lifecycle badge, and README
usethis::use_mit_license(name = "Benoit Rauturier")
#usethis::use_readme_rmd()
usethis::use_code_of_conduct()
usethis::use_lifecycle_badge("Experimental")
#usethis::use_news_md()
# For data
usethis::use_data_raw()
# For tests
usethis::use_testthat()
usethis::use_test("app")
# Dependencies
usethis::use_package("shiny")
usethis::use_package("DT")
usethis::use_package("stats")
usethis::use_package("graphics")
usethis::use_package("glue")
usethis::use_package("DBI")
usethis::use_package("RPostgres")
# Reorder your DESC
usethis::use_tidy_description()
install.packages("shinytemplates")
# This script allow you to quick clean your R session
# update documentation and NAMESPACE, localy install the package
# and run the main shinyapp from 'inst/app'
.rs.api.documentSaveAll() # close and save all open file
try(suppressWarnings(lapply(paste("package:", names(sessionInfo()$otherPkgs), sep = ""),
detach, character.only = TRUE, unload = TRUE)), silent = TRUE)
rm(list=ls(all.names = TRUE))
devtools::document('.')
devtools::load_all('.')
options(app.prod=FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp("inst/app")
#mistakes_names <- yaml::read_yaml("data-raw/config/mistakes_types.yml")[[1]]
library(oanalyser)
con_db <- connect_to_db()
mistakes_df <- DBI::dbGetQuery(con_db, "SELECT * FROM mistakes_types")
View(mistakes_df)
#mistakes_names <- yaml::read_yaml("data-raw/config/mistakes_types.yml")[[1]]
library(oanalyser)
con_db <- connect_to_db()
mistakes_df <- DBI::dbGetQuery(con_db, "SELECT * FROM mistakes_types")
View(mistakes_df)
#mistakes_names <- yaml::read_yaml("data-raw/config/mistakes_types.yml")[[1]]
library(oanalyser)
con_db <- connect_to_db()
mistakes_df <- DBI::dbGetQuery(con_db, "SELECT * FROM mistakes_types")
usethis::use_data(mistakes_df, overwrite = T)
# This script allow you to quick clean your R session
# update documentation and NAMESPACE, localy install the package
# and run the main shinyapp from 'inst/app'
.rs.api.documentSaveAll() # close and save all open file
try(suppressWarnings(lapply(paste("package:", names(sessionInfo()$otherPkgs), sep = ""),
detach, character.only = TRUE, unload = TRUE)), silent = TRUE)
rm(list=ls(all.names = TRUE))
devtools::document('.')
devtools::load_all('.')
options(app.prod=FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp("inst/app")
# This script allow you to quick clean your R session
# update documentation and NAMESPACE, localy install the package
# and run the main shinyapp from 'inst/app'
.rs.api.documentSaveAll() # close and save all open file
try(suppressWarnings(lapply(paste("package:", names(sessionInfo()$otherPkgs), sep = ""),
detach, character.only = TRUE, unload = TRUE)), silent = TRUE)
rm(list=ls(all.names = TRUE))
devtools::document('.')
devtools::load_all('.')
options(app.prod=FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp("inst/app")
?reactiveTable
?reactiveValues
data.frame()
dim(data.frame())
dim(data.frame()) == [0,0]
ncols(data.frame())
ncol(data.frame())
# This script allow you to quick clean your R session
# update documentation and NAMESPACE, localy install the package
# and run the main shinyapp from 'inst/app'
.rs.api.documentSaveAll() # close and save all open file
try(suppressWarnings(lapply(paste("package:", names(sessionInfo()$otherPkgs), sep = ""),
detach, character.only = TRUE, unload = TRUE)), silent = TRUE)
rm(list=ls(all.names = TRUE))
devtools::document('.')
devtools::load_all('.')
options(app.prod=FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp("inst/app")
# This script allow you to quick clean your R session
# update documentation and NAMESPACE, localy install the package
# and run the main shinyapp from 'inst/app'
.rs.api.documentSaveAll() # close and save all open file
try(suppressWarnings(lapply(paste("package:", names(sessionInfo()$otherPkgs), sep = ""),
detach, character.only = TRUE, unload = TRUE)), silent = TRUE)
rm(list=ls(all.names = TRUE))
devtools::document('.')
devtools::load_all('.')
options(app.prod=FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp("inst/app")
# This script allow you to quick clean your R session
# update documentation and NAMESPACE, localy install the package
# and run the main shinyapp from 'inst/app'
.rs.api.documentSaveAll() # close and save all open file
try(suppressWarnings(lapply(paste("package:", names(sessionInfo()$otherPkgs), sep = ""),
detach, character.only = TRUE, unload = TRUE)), silent = TRUE)
rm(list=ls(all.names = TRUE))
devtools::document('.')
devtools::load_all('.')
options(app.prod=FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp("inst/app")
# This script allow you to quick clean your R session
# update documentation and NAMESPACE, localy install the package
# and run the main shinyapp from 'inst/app'
.rs.api.documentSaveAll() # close and save all open file
try(suppressWarnings(lapply(paste("package:", names(sessionInfo()$otherPkgs), sep = ""),
detach, character.only = TRUE, unload = TRUE)), silent = TRUE)
rm(list=ls(all.names = TRUE))
devtools::document('.')
devtools::load_all('.')
options(app.prod=FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp("inst/app")
# This script allow you to quick clean your R session
# update documentation and NAMESPACE, localy install the package
# and run the main shinyapp from 'inst/app'
.rs.api.documentSaveAll() # close and save all open file
try(suppressWarnings(lapply(paste("package:", names(sessionInfo()$otherPkgs), sep = ""),
detach, character.only = TRUE, unload = TRUE)), silent = TRUE)
rm(list=ls(all.names = TRUE))
devtools::document('.')
devtools::load_all('.')
options(app.prod=FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp("inst/app")
# This script allow you to quick clean your R session
# update documentation and NAMESPACE, localy install the package
# and run the main shinyapp from 'inst/app'
.rs.api.documentSaveAll() # close and save all open file
try(suppressWarnings(lapply(paste("package:", names(sessionInfo()$otherPkgs), sep = ""),
detach, character.only = TRUE, unload = TRUE)), silent = TRUE)
rm(list=ls(all.names = TRUE))
devtools::document('.')
devtools::load_all('.')
options(app.prod=FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp("inst/app")
# This script allow you to quick clean your R session
# update documentation and NAMESPACE, localy install the package
# and run the main shinyapp from 'inst/app'
.rs.api.documentSaveAll() # close and save all open file
try(suppressWarnings(lapply(paste("package:", names(sessionInfo()$otherPkgs), sep = ""),
detach, character.only = TRUE, unload = TRUE)), silent = TRUE)
rm(list=ls(all.names = TRUE))
devtools::document('.')
devtools::load_all('.')
options(app.prod=FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp("inst/app")
# This script allow you to quick clean your R session
# update documentation and NAMESPACE, localy install the package
# and run the main shinyapp from 'inst/app'
.rs.api.documentSaveAll() # close and save all open file
try(suppressWarnings(lapply(paste("package:", names(sessionInfo()$otherPkgs), sep = ""),
detach, character.only = TRUE, unload = TRUE)), silent = TRUE)
rm(list=ls(all.names = TRUE))
devtools::document('.')
devtools::load_all('.')
options(app.prod=FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp("inst/app")
# This script allow you to quick clean your R session
# update documentation and NAMESPACE, localy install the package
# and run the main shinyapp from 'inst/app'
.rs.api.documentSaveAll() # close and save all open file
try(suppressWarnings(lapply(paste("package:", names(sessionInfo()$otherPkgs), sep = ""),
detach, character.only = TRUE, unload = TRUE)), silent = TRUE)
rm(list=ls(all.names = TRUE))
devtools::document('.')
devtools::load_all('.')
options(app.prod=FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp("inst/app")
#' Returns intercontrols parameters
#'
#' Thus function takes the number of controls and return a character vector for displaying the intercontrols to the user.
#'
#' @param number_of_controls
#'
#' @return the a character vector sarting with 'Start - 1'
#' @export
#'
#' @examples
#' get_intercontrols(20)
get_intercontrols <- function(number_of_controls = 20) {
if (!is.numeric(number_of_controls))
stop("The number of controls must be a number")
if (number_of_controls == 0)
number_of_controls = 1
control_a = c("Start", c(1:number_of_controls))
control_b = c(c(1:number_of_controls), "Arrival")
paste(control_a, control_b, sep = " - ")
}
#' This function returns the unvariant mistake form
#'
#' The unvariant mistake form is the type of mistake committed and the time lost on that particular mistake
#'
#'
#' @return a list of fluid rows objects
#' @export
#'
#' @examples
get_unvariant_mistake_form <- function() {
list(fluidRow(
column(
4,
checkboxGroupInput(
"mistakes_types",
label = h3("Mistakes committed"),
choiceNames = mistakes_df$name,
choiceValues = mistakes_df$code
)
),
column(
4,
shinyTime::timeInput("mistake_time_loss", label = h3("Time lost on that mistake"))
)
),
fluidRow(actionButton("mistake_submitted", label = h3("Submit mistake"))))
}
#' Mistakes form
#'
#' This function prepares the mistakes forms depending on the number of mistakes
#'
#' @param number_of_controls
#'
#' @return a mistake form
#' @export
#'
#' @examples
mod_get_mistakesInput <-  function() {
fluidPage(fluidRow(uiOutput("mistake_form")))
}
#' Server side function for the get mistake form
#'
#' This server function helps adapting the lenght of the intercontrols radio group button
#'
#' @param input
#' @param output
#' @param session
#'
#' @return
#' @export
#'
#' @examples
mod_get_mistakes <-
function(input,
output,
session,
number_of_controls = 20) {
intercontrols <-
reactive({
get_intercontrols(input$course_control_number)
})
observeEvent(input$validate_course_params,
{
output$mistake_form <- renderUI({
c(list(fluidRow(
shinyWidgets::radioGroupButtons(
"mistake_control",
label = h3("Control at which mistake append"),
choices = intercontrols()
)
)),
get_unvariant_mistake_form())
})
})
}
mod_register_mistake <- function(input,
output,
session) {
rv <- reactiveValues(mistakes_committed = data.frame())
observeEvent(input$mistake_submitted, {
print(input$mistake_control)
print(input$mistake_time_loss)
print(paste(input$mistakes_types, collapse = " / "))
mistake_entered <- data.frame(mistake_control = input$mistake_control,
mistake_time_loss = input$mistake_time_loss,
mistake_types = input$mistakes_types)
rv$mistakes_commited = dplyr::bind_rows(mistake_entered, rv$mistakes_commited)
print(rv$mistakes_commited)
})
}
# This script allow you to quick clean your R session
# update documentation and NAMESPACE, localy install the package
# and run the main shinyapp from 'inst/app'
.rs.api.documentSaveAll() # close and save all open file
try(suppressWarnings(lapply(paste("package:", names(sessionInfo()$otherPkgs), sep = ""),
detach, character.only = TRUE, unload = TRUE)), silent = TRUE)
rm(list=ls(all.names = TRUE))
devtools::document('.')
devtools::load_all('.')
options(app.prod=FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp("inst/app")
# This script allow you to quick clean your R session
# update documentation and NAMESPACE, localy install the package
# and run the main shinyapp from 'inst/app'
.rs.api.documentSaveAll() # close and save all open file
try(suppressWarnings(lapply(paste("package:", names(sessionInfo()$otherPkgs), sep = ""),
detach, character.only = TRUE, unload = TRUE)), silent = TRUE)
rm(list=ls(all.names = TRUE))
devtools::document('.')
devtools::load_all('.')
options(app.prod=FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp("inst/app")
# This script allow you to quick clean your R session
# update documentation and NAMESPACE, localy install the package
# and run the main shinyapp from 'inst/app'
.rs.api.documentSaveAll() # close and save all open file
try(suppressWarnings(lapply(paste("package:", names(sessionInfo()$otherPkgs), sep = ""),
detach, character.only = TRUE, unload = TRUE)), silent = TRUE)
rm(list=ls(all.names = TRUE))
devtools::document('.')
devtools::load_all('.')
options(app.prod=FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp("inst/app")
# This script allow you to quick clean your R session
# update documentation and NAMESPACE, localy install the package
# and run the main shinyapp from 'inst/app'
.rs.api.documentSaveAll() # close and save all open file
try(suppressWarnings(lapply(paste("package:", names(sessionInfo()$otherPkgs), sep = ""),
detach, character.only = TRUE, unload = TRUE)), silent = TRUE)
rm(list=ls(all.names = TRUE))
devtools::document('.')
devtools::load_all('.')
options(app.prod=FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp("inst/app")
# This script allow you to quick clean your R session
# update documentation and NAMESPACE, localy install the package
# and run the main shinyapp from 'inst/app'
.rs.api.documentSaveAll() # close and save all open file
try(suppressWarnings(lapply(paste("package:", names(sessionInfo()$otherPkgs), sep = ""),
detach, character.only = TRUE, unload = TRUE)), silent = TRUE)
rm(list=ls(all.names = TRUE))
devtools::document('.')
devtools::load_all('.')
options(app.prod=FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp("inst/app")
# This script allow you to quick clean your R session
# update documentation and NAMESPACE, localy install the package
# and run the main shinyapp from 'inst/app'
.rs.api.documentSaveAll() # close and save all open file
try(suppressWarnings(lapply(paste("package:", names(sessionInfo()$otherPkgs), sep = ""),
detach, character.only = TRUE, unload = TRUE)), silent = TRUE)
rm(list=ls(all.names = TRUE))
devtools::document('.')
devtools::load_all('.')
options(app.prod=FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp("inst/app")
# This script allow you to quick clean your R session
# update documentation and NAMESPACE, localy install the package
# and run the main shinyapp from 'inst/app'
.rs.api.documentSaveAll() # close and save all open file
try(suppressWarnings(lapply(paste("package:", names(sessionInfo()$otherPkgs), sep = ""),
detach, character.only = TRUE, unload = TRUE)), silent = TRUE)
rm(list=ls(all.names = TRUE))
devtools::document('.')
devtools::load_all('.')
options(app.prod=FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp("inst/app")
library(DT)
# This script allow you to quick clean your R session
# update documentation and NAMESPACE, localy install the package
# and run the main shinyapp from 'inst/app'
.rs.api.documentSaveAll() # close and save all open file
try(suppressWarnings(lapply(paste("package:", names(sessionInfo()$otherPkgs), sep = ""),
detach, character.only = TRUE, unload = TRUE)), silent = TRUE)
rm(list=ls(all.names = TRUE))
devtools::document('.')
devtools::load_all('.')
options(app.prod=FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp("inst/app")
# This script allow you to quick clean your R session
# update documentation and NAMESPACE, localy install the package
# and run the main shinyapp from 'inst/app'
.rs.api.documentSaveAll() # close and save all open file
try(suppressWarnings(lapply(paste("package:", names(sessionInfo()$otherPkgs), sep = ""),
detach, character.only = TRUE, unload = TRUE)), silent = TRUE)
rm(list=ls(all.names = TRUE))
devtools::document('.')
devtools::load_all('.')
options(app.prod=FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp("inst/app")
?DT::renderDataTable
# This script allow you to quick clean your R session
# update documentation and NAMESPACE, localy install the package
# and run the main shinyapp from 'inst/app'
.rs.api.documentSaveAll() # close and save all open file
try(suppressWarnings(lapply(paste("package:", names(sessionInfo()$otherPkgs), sep = ""),
detach, character.only = TRUE, unload = TRUE)), silent = TRUE)
rm(list=ls(all.names = TRUE))
devtools::document('.')
devtools::load_all('.')
options(app.prod=FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp("inst/app")
# This script allow you to quick clean your R session
# update documentation and NAMESPACE, localy install the package
# and run the main shinyapp from 'inst/app'
.rs.api.documentSaveAll() # close and save all open file
try(suppressWarnings(lapply(paste("package:", names(sessionInfo()$otherPkgs), sep = ""),
detach, character.only = TRUE, unload = TRUE)), silent = TRUE)
rm(list=ls(all.names = TRUE))
devtools::document('.')
devtools::load_all('.')
options(app.prod=FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp("inst/app")
# This script allow you to quick clean your R session
# update documentation and NAMESPACE, localy install the package
# and run the main shinyapp from 'inst/app'
.rs.api.documentSaveAll() # close and save all open file
try(suppressWarnings(lapply(paste("package:", names(sessionInfo()$otherPkgs), sep = ""),
detach, character.only = TRUE, unload = TRUE)), silent = TRUE)
rm(list=ls(all.names = TRUE))
devtools::document('.')
devtools::load_all('.')
options(app.prod=FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp("inst/app")
# This script allow you to quick clean your R session
# update documentation and NAMESPACE, localy install the package
# and run the main shinyapp from 'inst/app'
.rs.api.documentSaveAll() # close and save all open file
try(suppressWarnings(lapply(paste("package:", names(sessionInfo()$otherPkgs), sep = ""),
detach, character.only = TRUE, unload = TRUE)), silent = TRUE)
rm(list=ls(all.names = TRUE))
devtools::document('.')
devtools::load_all('.')
options(app.prod=FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp("inst/app")
# This script allow you to quick clean your R session
# update documentation and NAMESPACE, localy install the package
# and run the main shinyapp from 'inst/app'
.rs.api.documentSaveAll() # close and save all open file
try(suppressWarnings(lapply(paste("package:", names(sessionInfo()$otherPkgs), sep = ""),
detach, character.only = TRUE, unload = TRUE)), silent = TRUE)
rm(list=ls(all.names = TRUE))
devtools::document('.')
devtools::load_all('.')
options(app.prod=FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp("inst/app")
# This script allow you to quick clean your R session
# update documentation and NAMESPACE, localy install the package
# and run the main shinyapp from 'inst/app'
.rs.api.documentSaveAll() # close and save all open file
try(suppressWarnings(lapply(paste("package:", names(sessionInfo()$otherPkgs), sep = ""),
detach, character.only = TRUE, unload = TRUE)), silent = TRUE)
rm(list=ls(all.names = TRUE))
devtools::document('.')
devtools::load_all('.')
options(app.prod=FALSE) # TRUE = production mode, FALSE = development mode
shiny::runApp("inst/app")
